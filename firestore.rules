rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
    	allow create: if isSignedIn() && isValidUserDoc(userId);
      allow read: if isVerified();
      allow delete, update: if isOwner();
      allow update: if isValidUserDoc(userId);
      
      match /tasks/{task} {
        allow create: if
          isSignedInAndVerified() &&
          isValidDoc(task) &&
          isValidTask();
        allow read, delete, update: if isOwner();
        allow update: if
          didntChangeConstant() &&
          isValidDoc(task) &&
          isValidTask();
      }
      match /info/{info} {
        allow create: if isSignedInAndVerified() && isInfoValid(info);
        allow read, update: if isOwner();
        allow update: if didntChangeConstant();
      }
      match /cache/{cache} {
        allow create: if isSignedIn() && isValidDoc(cache);
        allow update, read: if isOwner();
        allow update: if didntChangeConstant();
      }
      match /tags/{tag} {
        allow create: if isSignedInAndVerified() && isValidTag(tag);
        allow read, update, delete: if isOwner();
        allow update: if didntChangeConstant() && isValidTag(tag);
      }
      match /filters/{tag} {
        allow create: if isSignedInAndVerified() && isValidDoc(tag);
        allow read, update, delete: if isOwner();
        allow update: if didntChangeConstant();
      }
      match /lists/{list} {
        allow create: if isSignedInAndVerified() && isValidDoc(list) && isValidList();
        allow update, read, delete: if isOwner();
        allow update: if didntChangeConstant() && isValidDoc(list) && isValidList();
      }
      match /stats/{info} {
        allow create: if isSignedInAndVerified() && isValidDoc(info);
        allow update, read, delete: if isOwner();
        allow update: if didntChangeConstant();
      }
      match /folders/{fold} {
        allow create: if isSignedInAndVerified() && isValidFolder(fold);
        allow update, read, delete: if isOwner();
        allow update: if didntChangeConstant() && isValidFolder(fold);
      }

      function isInfoValid(bracketId) {
        return
          isValidDoc(bracketId) &&
          isNullOrBollean('ungroupTasksInHeadings') &&
          isNullOrBollean('disablePmFormat') &&
          isArrayOrUndefined('hidedViews', 30) &&
          isArrayOrUndefined('hidedSections', 30) &&
          (!('calendarOrders' in incomingData()) || incomingData().calendarOrders is map) &&
          incomingData().size() < 10
      }
      function isValidTag(bracketId) {
        return
          isValidDoc(bracketId) &&
          incomingData().name is string &&
          incomingData().created is string &&
          incomingData().createdFire is timestamp &&
          isNullStringOrUndefined('parent') &&
          isArrayOrUndefined('order', 1000) &&
          incomingData().size() < 10
      }
      function isValidUserDoc(bracketId) {
        return
          incomingData().userId == bracketId &&
          incomingData().userId == request.auth.uid &&
          (
            (incomingData().photoURL is string) ||
            (incomingData().photoURL == null) ||
            !('photoURL' in incomingData())
          ) &&
          (incomingData().size() > 1 && incomingData().size() < 6) &&
          (
            (
              (('displayName' in incomingData()) && (incomingData().displayName.size() < 75) && ('email' in incomingData()) && (incomingData().email.size() < 75)) && (incomingData().isAnonymous == false)
            ) ||
            (
              (!('displayName' in incomingData()) && !('email' in incomingData()) && incomingData().isAnonymous == true)
            )
          )
      }
      function isValidFolder(id) {
        return
          isValidDoc(id) &&
          incomingData().name is string &&
          isArrayOrUndefined('files', 30) &&
          isArrayOrUndefined('tasks', 50) &&
          isArrayOrUndefined('order', 50)
      }
    }

    match /{groupId=**}/groupCache/{cacheId} {
      allow create: if
        isSignedInAndVerified() &&
        incomingData().userId == request.auth.uid &&
        isValidGroupCacheDoc();
      allow list: if
        isSignedInAndVerified() &&
        isInGroup();
      allow delete: if
        isSignedInAndVerified() &&
        isOwner()
      allow update: if
        isSignedInAndVerified() &&
        isInGroup() &&
        didntChangeConstant() &&
        isValidGroupCacheDoc() &&
        (isOwner() || incomingData().name == existingData().name);

    }
    match /{groupPath=**}/invites/{inviteId} {
      allow create: if
        isSignedInAndVerified() &&
        isValidInviteDoc() &&
        isGroupOwner(groupPath);
      allow list: if
        isSignedInAndVerified() &&
        (isOwner() || isInviteTarget())
      allow delete: if
        isSignedInAndVerified() &&
        isOwner();
      allow update: if
        isSignedInAndVerified() &&
        existingData().to == request.auth.uid &&
        onlyChangedDeniedField();
    }

    match /groups/{groupId} {
      allow create: if isSignedInAndVerified() && isValidGroupDoc(groupId);
      allow delete: if isOwner();

      match /info/info {
        allow create: if
          isSignedInAndVerified() &&
          isValidDoc(groupId) &&
          isValidGroupInfoDoc() &&
          incomingData().size() == 5;
        allow read: if
          isSignedInAndVerified() &&
          isInGroup();
        allow update: if
          isSignedInAndVerified() &&
          isInGroup() &&
          didntChangeConstant() &&
          isValidGroupInfoDoc() &&
          incomingData().size() == 5 &&
          (isOwner() || incomingData().name == existingData().name);
      }
      match /tasks/{task} {
        allow create: if
          isSignedInAndVerified() &&
          incomingData().id == task &&
          isValidTask() &&
          isGroupMember(groupId);
        allow read, delete: if isSignedInAndVerified() && isGroupMember(groupId);
        allow update: if
          isSignedInAndVerified() &&
          existingData().id == incomingData().id &&
          incomingData().id == task &&
          isValidTask() &&
          isGroupMember(groupId);
      }
      match /lists/{list} {
        allow create: if
          isSignedInAndVerified() &&
          incomingData().id == list &&
          isValidList() &&
          isGroupMember(groupId);
        allow read, delete: if isSignedInAndVerified() && isGroupMember(groupId);
        allow update: if
          isSignedInAndVerified() &&
          existingData().id == incomingData().id &&
          incomingData().id == list &&
          isValidList() &&
          isGroupMember(groupId);
      }
    }

    function isGroupMember(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)/info/info).data.users[request.auth.uid] == true
    }
    function isInviteTarget() {
      return
        existingData().to == request.auth.uid &&
        existingData().denied == null
    }
    function isValidTask() {
      return
        incomingData().name is string &&
        incomingData().created is string &&
        incomingData().createdFire is timestamp &&
        isArrayOrUndefined('files', 30) &&
        isArrayOrUndefined('checklist', 50) &&
        isArrayOrUndefined('order', 50) &&
        isArrayOrUndefined('tags', 50) &&
        isNullStringOrUndefined('folder') &&
        isNullStringOrUndefined('group') &&

        !(
          (incomingData().folder is string) &&
          (incomingData().group is string)
        ) &&
        
        isNullStringOrUndefined('taskDuration') &&
        isNullStringOrUndefined('priority') &&
        isNullStringOrUndefined('heading') &&
        isNullStringOrUndefined('notes') &&
        isNullStringOrUndefined('assigned') &&
        isNullStringOrUndefined('list') &&
        incomingData().size() < 65 &&
        (
          (!('calendar' in incomingData()) || incomingData().calendar == null) ||
          (
            incomingData().calendar.type == 'specific' ||
            incomingData().calendar.type == 'someday' ||
            incomingData().calendar.type == 'anytime' ||
            incomingData().calendar.type == 'after completion' ||
            incomingData().calendar.type == 'daily' ||
            incomingData().calendar.type == 'weekly' ||
            incomingData().calendar.type == 'monthly' ||
            incomingData().calendar.type == 'yearly'
          )
        )
    }
    function isInGroup() {
      return existingData().users[request.auth.uid] == true
    }
    function isValidList() {
        return
          incomingData().name is string &&
          incomingData().created is string &&
          incomingData().createdFire is timestamp &&
          (!('smartViewsOrders' in incomingData()) || incomingData().smartViewsOrders is map) &&
          isArrayOrUndefined('files', 30) &&
          isArrayOrUndefined('tags', 50) &&
          isArrayOrUndefined('tasks', 50) &&

          (
            !('folder' in incomingData()) ||
            !('group' in incomingData()) ||
            !(
              (incomingData().folder is string) && (incomingData().group is string)
            ) ||
            (
              (incomingData().folder == null) || (incomingData().group == null)
            )
          ) &&
          
          isNullStringOrUndefined('notes') &&
          isNullStringOrUndefined('assigned') &&
          isNullStringOrUndefined('folder') &&
          isNullStringOrUndefined('group') &&
          (
            (!('calendar' in incomingData()) || incomingData().calendar == null) ||
            (
              incomingData().calendar.type == 'specific' ||
              incomingData().calendar.type == 'after completion' ||
              incomingData().calendar.type == 'someday' ||
              incomingData().calendar.type == 'anytime' ||
              incomingData().calendar.type == 'daily' ||
              incomingData().calendar.type == 'weekly' ||
              incomingData().calendar.type == 'monthly' ||
              incomingData().calendar.type == 'yearly'
            )
          )
      }
    function isGroupOwner(groupPath) {
      return get(/databases/$(database)/documents/$(groupPath)).data.userId == request.auth.uid
    }
    function onlyChangedDeniedField() {
      return
        existingData().groupId == incomingData().groupId &&
        existingData().userId == incomingData().userId &&
        existingData().id == incomingData().id &&

        existingData().created == incomingData().created &&
        existingData().createdFire == incomingData().createdFire &&

        existingData().groupName == incomingData().groupName &&

        existingData().ownerProfile.uid == incomingData().ownerProfile.uid &&
        existingData().ownerProfile.displayName == incomingData().ownerProfile.displayName &&
        existingData().ownerProfile.email == incomingData().ownerProfile.email &&
        existingData().ownerProfile.photoURL == incomingData().ownerProfile.photoURL &&
        existingData().ownerProfile.size() == incomingData().ownerProfile.size() &&

        existingData().targetProfile.uid == incomingData().targetProfile.uid &&
        existingData().targetProfile.displayName == incomingData().targetProfile.displayName &&
        existingData().targetProfile.email == incomingData().targetProfile.email &&
        existingData().targetProfile.photoURL == incomingData().targetProfile.photoURL &&
        existingData().targetProfile.size() == incomingData().targetProfile.size() &&

        existingData().to == incomingData().to &&
        (incomingData().denied == false || incomingData().denied == true) &&

        incomingData().size() == 10
    }
    function isValidInviteDoc() {
      return
        incomingData().groupId is string &&
        incomingData().userId is string &&
        incomingData().to != incomingData().userId &&
        incomingData().id is string &&

        incomingData().created is string &&
        incomingData().createdFire is timestamp &&

        incomingData().groupName is string &&
        incomingData().ownerProfile is map &&
        incomingData().ownerProfile.uid == incomingData().userId &&
        incomingData().ownerProfile.size() == 4 &&
        incomingData().targetProfile is map &&
        incomingData().targetProfile.uid == incomingData().to &&
        incomingData().targetProfile.size() == 4 &&
        incomingData().to is string &&
        incomingData().to != incomingData().userId &&
        incomingData().denied == null &&

        incomingData().size() == 10
    }
    function isValidGroupDoc(id) {
      return
        isValidDoc(id) &&
        incomingData().size() == 2
    }
    function isValidGroupCacheDoc() {
      return
        isValidGroupInfoDoc() &&
        incomingData().size() > 5 &&
        incomingData().size() < 15 &&

        isNullStringOrUndefined('notes') &&
        isNullStringOrUndefined('color') &&
        isArrayOrUndefined('files', 20) &&

        (!('tasks' in incomingData()) || incomingData().tasks is map && incomingData().tasks.size() < 2001) &&
        (!('comments' in incomingData()) || incomingData().comments is map && incomingData().comments.size() < 4001) &&
        (!('order' in incomingData()) || incomingData().order is list) &&
        (!('listsOrder' in incomingData()) || incomingData().listsOrder is list) &&
        (!('lists' in incomingData()) || incomingData().lists is map && incomingData().lists.size() < 2001) &&
        (!('smartViewsOrders' in incomingData()) || (incomingData().smartViewsOrders is map && incomingData().smartViewsOrders.size() < 2001))
    }
    function isValidGroupInfoDoc() {
      return
        incomingData().userId is string &&
        incomingData().id is string &&
        incomingData().name is string &&

        incomingData().users is map &&
        incomingData().users[incomingData().userId] == true &&
        incomingData().users.size() < 21 &&

        incomingData().profiles is map &&
        incomingData().profiles[incomingData().userId] is map &&
        incomingData().profiles.size() < 21 &&
        incomingData().profiles.size() == incomingData().users.size()
    }


    function isSignedIn() {
      return request.auth.uid != null;
    }
    function isOwner() {
      return isSignedIn() && (request.auth.uid == resource.data.userId);
    }
    function isVerified() {
      return isSignedIn() && request.auth.token.email_verified
    }
    function isSignedInAndVerified() {
      return isSignedIn() && isVerified()
    }
    function incomingData() {
      return request.resource.data
    }
    function existingData() {
      return resource.data
    }
    function isValidDoc(id) {
      return
        incomingData().userId == request.auth.uid &&
        incomingData().id == id
    }
    function didntChangeConstant() {
      return
        existingData().userId == incomingData().userId &&
        existingData().id == incomingData().id
    }

    function isArrayOrUndefined(fieldName, max) {
      return (!(fieldName in incomingData()) || (incomingData()[fieldName] is list && incomingData()[fieldName].size() < (max + 1)))
    }
    function isNullStringOrUndefined(fieldName) {
      return
        !(fieldName in incomingData()) ||
        incomingData()[fieldName] is string || incomingData()[fieldName] == null
    }
    function isNullOrBollean(fieldName) {
      return
        (!(fieldName in incomingData()) || incomingData()[fieldName] == null || incomingData()[fieldName] == true || incomingData()[fieldName] == false)
    }
  }
}
